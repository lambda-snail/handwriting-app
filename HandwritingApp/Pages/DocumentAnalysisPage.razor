@page "/analyze"
@using HandwritingApp.Services
@using Azure.Storage.Blobs
@using Azure.Storage.Blobs.Models
@using Azure
@using Azure.AI.FormRecognizer.DocumentAnalysis

<MudOverlay @ref="_overlay" DarkBackground="true" AutoClose="false">
    <MudProgressCircular Color="Color.Info" Indeterminate="true" />
</MudOverlay>

<MudGrid Spacing="6" Class="mt-16">
    <MudItem xs="12">
        <MudToolBar>
            <MudIconButton OnClick="async () => await BeginAnalysis(_selectedUnit)" Icon="@Icons.Material.Filled.CloudUpload" Disabled="_selectedUnit == null">Begin Analysis</MudIconButton>
        </MudToolBar>
    </MudItem>
    <MudItem xs="5">
        @if (_isInitialized)
        {
            <MudDataGrid
                T="AnalysisUnit"
                Items="@_units"
                MultiSelection="false"
                SelectedItemsChanged="SelectionChanged">
                <Columns>
                    <SelectColumn/>
                    <PropertyColumn Property="x => x.Blob.Name" Title="Name"/>
                </Columns>
            </MudDataGrid>
        }
        else
        {
            <MudSkeleton Animation="Animation.Wave"/>
            <MudSkeleton Animation="Animation.Wave"/>
            <MudSkeleton Animation="Animation.Wave"/>
            <MudSkeleton Animation="Animation.Wave"/>
        }
    </MudItem>
    <MudItem xs="7">
        <MudText Typo="Typo.h5" GutterBottom="true">Analysis Results</MudText>
        <MudPaper Class="d-flex flex-column pa-2" Outlined="false" Elevation="25">
            @if (_selectedUnit is not null)
            {
                @if (_selectedUnit.Result is not null)
                {
                    foreach (DocumentStyle style in _selectedUnit.Result.Styles)
                    {
                        bool isHandwritten = style.IsHandwritten.HasValue && style.IsHandwritten == true;
                        if (isHandwritten && style.Confidence > 0.8)
                        {
                            foreach (DocumentSpan span in style.Spans)
                            {
                                <MudText>
                                    @_selectedUnit.Result.Content.Substring(span.Index, span.Length)
                                </MudText>
                            }
                        }
                    }
                }
            }
            else
            {
                <MudText>Select a file and press the cloud icon to begin analysis</MudText>
            }
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    bool _isInitialized = false;
    
    public class AnalysisUnit
    {
        public BlobItem Blob { get; set; }
        public AnalyzeResult? Result { get; set; }
    }

    private AnalysisUnit? _selectedUnit = null;

    [Inject]
    private IDocumentAnalysisService _documentIntelligence { get; set; }
    
    [Inject]
    private BlobServiceClient _blobServiceClient { get; set; }
    
    [Inject]
    private IDialogService _dialogService { get; set; }
    
    [Inject]
    private ISnackbar _toasts { get; set; }
    
    
    private List<AnalysisUnit> _units = new();
    private BlobContainerClient _containerClient;
    private MudOverlay _overlay;

    protected override async Task OnInitializedAsync()
    {
        _containerClient = _blobServiceClient.GetBlobContainerClient("documents");
        var blobsIterator = _containerClient.GetBlobsAsync();

        await PopulateGrid(blobsIterator);
    }

    private async Task PopulateGrid(AsyncPageable<BlobItem> blobsIterator)
    {
        _isInitialized = false;
        StateHasChanged();
        
        List<AnalysisUnit> list = new();
        await foreach (var blob in blobsIterator)
        {
            list.Add(new AnalysisUnit { Blob = blob });
        }

        _units = list;
        _isInitialized = true;
        StateHasChanged();
    }
    
    private async Task BeginAnalysis(AnalysisUnit unit)
    {
        if (unit.Result is not null)
        {
            await _dialogService.ShowMessageBox("Analysis Already Done", $"The analysis for the file {unit.Blob.Name} has already completed with success");
            return;
        }

        if (!_documentIntelligence.HasAzureConnection)
        {
            await _dialogService.ShowMessageBox("Connection Not Initialized", "The endpoint or key for accessing document intelligence seems to be missing. Add them on the settings page and come back here to try again.");
            return;
        }
        
        _overlay.Visible = true;
        StateHasChanged();
        
        var client = _containerClient.GetBlobClient(unit.Blob.Name);
        var result = await _documentIntelligence.AnalyzeHandwriting_WaitUntilDone(client.Uri);
        unit.Result = result;

        _overlay.Visible = false;
        StateHasChanged();

        _toasts.Add("The analysis has been completed", Severity.Success);
    }

    private void SelectionChanged(HashSet<AnalysisUnit> arg)
    {
        if (arg.Count != 1)
        {
            _selectedUnit = null;
        }
        else
        {
            _selectedUnit = arg.First();   
        }
    }

}