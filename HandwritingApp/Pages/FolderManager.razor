@page "/documents"
@using Azure.Storage.Blobs
@using Azure.Storage.Blobs.Models
@using Azure
@using System.Collections.ObjectModel

@if (! _isLoadingDone)
{
    <MudGrid>
        <MudItem xs="12">
            <MudSkeleton Animation="Animation.Wave"/>
        </MudItem>
        <MudItem xs="12">
            <MudSkeleton Animation="Animation.Wave"/>
        </MudItem>
        <MudItem xs="12">
            <MudSkeleton Animation="Animation.Wave"/>
        </MudItem>
        <MudItem xs="12">
            <MudSkeleton Animation="Animation.Wave"/>
        </MudItem>
    </MudGrid>
}
else
{
    <MudPaper Elevation="25">
        <MudToolBar>
            <MudTooltip Text="Upload images">
                <MudFileUpload T="IReadOnlyList<IBrowserFile>" Accept=".pdf, .png, .jpg" FilesChanged="UploadFiles" MaximumFileCount="100">
                    <ButtonTemplate>
                        <MudIconButton HtmlTag="label"
                                   Variant="Variant.Outlined"
                                   Color="Color.Primary"
                                   Icon="@Icons.Material.Filled.CloudUpload"
                                   for="@context">
                            Upload
                        </MudIconButton>
                    </ButtonTemplate>
                </MudFileUpload>
            </MudTooltip>
            
            <!--MudIconButton Icon="@Icons.Material.Outlined.Edit"/-->
            <MudTooltip Text="Delete image">
                <MudIconButton OnClick="DeleteSelectedBlobs" Icon="@Icons.Material.Outlined.Delete" Disabled="_selection.Count == 0" Color="Color.Error"/>    
            </MudTooltip>
            @* <MudSpacer /> *@
            @* <MudIconButton Icon="@Icons.Material.Outlined.Notifications" /> *@
        </MudToolBar>
    </MudPaper>

    <MudDataGrid T="BlobItem"
                 MultiSelection="true"
                 Items="@_blobs"
                 Virtualize="true"
                 ReadOnly="true"
                 SelectedItemsChanged="SelectionChanged">
        <Columns>
            <SelectColumn T="BlobItem" />
            <PropertyColumn Property="x => x.Name" Title="File Name"/>
            <PropertyColumn Property="x => x.Properties.LastModified" Title="Modified On"/>
            <PropertyColumn Property="x => x.Properties.ContentType" Title="Content Type"/>
        </Columns>
    </MudDataGrid>
}


@code {
    bool _isLoadingDone = false;
    
    private BlobContainerClient _containerClient;
    private AsyncPageable<BlobItem> _blobsIterator;
    private List<BlobItem> _blobs = new List<BlobItem>();

    private List<BlobItem> _selection = new List<BlobItem>();
    
    [Inject]
    public BlobServiceClient blobServiceClient { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _containerClient = blobServiceClient.GetBlobContainerClient("documents");
        _blobsIterator = _containerClient.GetBlobsAsync();

        await PopulateGrid();
    }

    private async Task PopulateGrid()
    {
        _isLoadingDone = false;
        StateHasChanged(); 
        
        List<BlobItem> list = new();
        await foreach (var blob in _blobsIterator)
        {
            list.Add(blob);
        }

        _blobs = list;
        _isLoadingDone = true;
        StateHasChanged();
    }
    
    private void SelectionChanged(HashSet<BlobItem> arg)
    {
        if (arg.Count != 0)
        {
            _selection = arg.ToList();
        }
        else
        {
            _selection.Clear();
        }
    }

    private async Task DeleteSelectedBlobs(MouseEventArgs obj)
    {
        foreach (var blob in _selection)
        {
            await _containerClient.DeleteBlobAsync(blob.Name);
            _blobs.Remove(blob);
        }
    }

    private async Task UploadFiles(IReadOnlyList<IBrowserFile> files)
    {
        if (files.Count == 0) return;
        
        foreach (var file in files)
        {
            using var stream = file.OpenReadStream();
            string fileName = file.Name;
            await _containerClient.UploadBlobAsync(fileName, stream);
            //image = ImageSource.FromStream(() => stream);
        }

        await PopulateGrid();
    }

}